{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stonks","text":"<p>Welcome - docs for the Stonks project.</p>"},{"location":"getting-started/","title":"Overview","text":"<p>This documentation aims to cover an analysis and methods to decide which options can be profitable. For options data, we will be pulling from Polygon.io (https://polygon.io/docs/rest/options/overview).</p>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>So far, we have a uv/hatch managed <code>stonks</code> package. First, the repository should be cloned and then we can get started.</p> <ol> <li> <p>In the directory that contains the repository, run the command <code>hatch shell env create stonks-dev</code>. This will create a venv called <code>stonks-dev</code> with all the required packages. </p> </li> <li> <p>Each user must have their own API key for Polygon. The <code>data_preprocessing.py</code> script has been set up so that we can retrieve options data from the <code>Options Starter</code> plan and the </p> <ul> <li>This plan allows us to analyze the Greeks, historical options pricing, and various other \"snapshots\" of the stock.</li> <li>The API KEY should also allow us to get access to the <code>Stocks Basics</code> plan.</li> </ul> </li> </ol>"},{"location":"guides/data_preprocessing/","title":"Data Preprocessing","text":"<p>This page refers to how we preprocess and source our data. </p> <p>Data Source: <code>Polygon.io</code> (Polygon Website)</p> <p>The ETL pipeline is currently set up to read in an API_KEY from <code>Polygon.io</code> - this API_KEY should be unique to each user of this repo. Polygon has data pertaining to options, futures, Forex, etc. The we are able to access if a function of which tier we are willing to pay for. For historical ticker data, we just use the free option. For stock options, we use the <code>option starter</code> plan.</p> <p>So far, the goal is relavitely simple in how we load and clean data. We get options contracts that are set to expire within a range of days from today's current data (by defauly the range is 20 - 120 days from now). We filter out options contracts that have NULL values and no valid greeks. * We could make a cleaner dataset by placing filters on the option's open interest, etc (further eda is needed here). * The notebook <code>options.ipynb</code> contains brief showings of what the filtered contracts dataframe looks like as well</p>"},{"location":"guides/data_preprocessing/#options-data-fields","title":"Options Data Fields:","text":"<ul> <li>cfi  </li> <li>contract_type  </li> <li>exercise_style  </li> <li>expiration_date  </li> <li>primary_exchange  </li> <li>shares_per_contract  </li> <li>strike_price  </li> <li>ticker  </li> <li>underlying_ticker  </li> <li>greeks.details.contract_type  </li> <li>greeks.details.exercise_style  </li> <li>greeks.details.expiration_date  </li> <li>greeks.details.shares_per_contract  </li> <li>greeks.details.strike_price  </li> <li>greeks.details.ticker  </li> <li>greeks.greeks.delta  </li> <li>greeks.greeks.gamma  </li> <li>greeks.greeks.theta  </li> <li>greeks.greeks.vega  </li> <li>greeks.implied_volatility  </li> <li>greeks.open_interest  </li> <li>greeks.underlying_asset.ticker  </li> <li>greeks.day.change  </li> <li>greeks.day.change_percent  </li> <li>greeks.day.close  </li> <li>greeks.day.high  </li> <li>greeks.day.last_updated  </li> <li>greeks.day.low  </li> <li>greeks.day.open  </li> <li>greeks.day.previous_close  </li> <li>greeks.day.volume  </li> <li>greeks.day.vwap  </li> </ul> <p>Analyzing the same ticker, we pull in 2 years of historical data and look at the chart. This data is a lot more limited since it is \"free\" but nonetheless, it provides a good starting point.</p>"},{"location":"guides/data_preprocessing/#historical-data-fields","title":"Historical Data Fields","text":"<ul> <li>volume</li> <li>vw</li> <li>open</li> <li>close</li> <li>high</li> <li>low</li> <li>timestamp</li> <li>n (number of trades)</li> </ul> <p>There are additional types of data that we could look into - maybe Futures such a <code>VIX</code> or maybe other data vendors. We also need to figure out the gaps in Polygon's data and how what data we could use to fill these gaps.</p>"},{"location":"guides/plotting/","title":"Plotting","text":""}]}